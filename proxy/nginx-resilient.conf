events {
    worker_connections 1024;
}

http {
    # Logs detallados para debugging
    log_format detailed '$remote_addr - $remote_user [$time_local] "$request" '
                       '$status $body_bytes_sent "$http_referer" '
                       '"$http_user_agent" '
                       'experiment_header="$http_aws_cf_cd_super_svp_9f8b7a6d" '
                       'upstream_used="$upstream_addr"';
    
    access_log /var/log/nginx/access.log detailed;
    error_log /var/log/nginx/error.log warn;
    
    # Resolver DNS para servicios dinámicos
    resolver kube-dns.kube-system.svc.cluster.local valid=5s;
    
    # Backend de producción (con fallback a IP si DNS falla)
    upstream stable_backend {
        server demo-microservice-stable.default.svc.cluster.local:80 max_fails=2 fail_timeout=5s;
        # Fallback a servicio local si existe
        server 127.0.0.1:3000 backup down;
    }
    
    # Backend de experimento con múltiples fallbacks
    upstream experiment_backend {
        server demo-microservice-experiment.default.svc.cluster.local:80 max_fails=1 fail_timeout=1s;
        server demo-microservice-stable.default.svc.cluster.local:80 backup;
        # Fallback final
        server 127.0.0.1:3000 backup down;
    }
    
    # Health check interno (puerto diferente para evitar conflictos)
    server {
        listen 8080;
        location /health {
            access_log off;
            return 200 "intelligent-proxy-healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Status extendido
        location /status {
            access_log off;
            return 200 "Proxy Status: OK\nUpstreams: stable_backend, experiment_backend\nConflict-Safe: true\n";
            add_header Content-Type text/plain;
        }
    }
    
    # Servidor principal (puerto configurable)
    server {
        listen 80;
        server_name _;
        
        # Status del proxy
        location /proxy/status {
            access_log off;
            return 200 "Intelligent Proxy Status (Conflict-Safe)\n======================\nProduction: demo-microservice-stable.default.svc.cluster.local:80\nExperiment: demo-microservice-experiment.default.svc.cluster.local:80\nHeader Required: aws-cf-cd-super-svp-9f8b7a6d = 123e4567-e89b-12d3-a456-42661417400\nDNS Resolver: kube-dns.kube-system.svc.cluster.local\nFallback: Enabled\n";
            add_header Content-Type text/plain;
        }
        
        # Health check público
        location /proxy/health {
            access_log off;
            return 200 "proxy-ok\n";
            add_header Content-Type text/plain;
        }
        
        # Información de conflictos
        location /proxy/conflicts {
            access_log off;
            return 200 "Conflict Prevention Measures:\n- Using FQDN for services\n- DNS resolver configured\n- Multiple fallback levels\n- Configurable ports\n- Namespace isolation ready\n";
            add_header Content-Type text/plain;
        }
        
        # Enrutamiento principal
        location / {
            # Headers estándar
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Headers adicionales para debugging
            proxy_set_header X-Proxy-Version "intelligent-v1.0";
            proxy_set_header X-Conflict-Safe "true";
            
            # Configuración de timeouts y reintentos (más conservadora)
            proxy_connect_timeout 3s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 3;
            
            # Si hay header de experimento, intentar experimento primero
            if ($http_aws_cf_cd_super_svp_9f8b7a6d = "123e4567-e89b-12d3-a456-42661417400") {
                proxy_pass http://experiment_backend;
                add_header X-Routed-To "experiment-attempt" always;
                add_header X-Fallback-Available "yes" always;
                add_header X-Conflict-Safe "true" always;
                break;
            }
            
            # Tráfico normal va a producción
            proxy_pass http://stable_backend;
            add_header X-Routed-To "production-stable" always;
            add_header X-Conflict-Safe "true" always;
        }
    }
}