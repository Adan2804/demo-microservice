# Proxy inteligente que se auto-configura detectando servicios disponibles
apiVersion: v1
kind: ConfigMap
metadata:
  name: smart-proxy-config
  namespace: default
data:
  nginx.conf: |
    events {
        worker_connections 1024;
    }
    
    http {
        # Resolver DNS para detectar servicios dinámicamente
        resolver kube-dns.kube-system.svc.cluster.local valid=5s;
        
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                       '$status $body_bytes_sent "$http_referer" '
                       '"$http_user_agent" "$http_x_forwarded_for" '
                       'experiment_header="$http_aws_cf_cd_super_svp_9f8b7a6d" '
                       'upstream="$upstream_addr"';
        
        access_log /var/log/nginx/access.log main;
        error_log /var/log/nginx/error.log warn;
        
        # Variables para servicios dinámicos
        map $http_aws_cf_cd_super_svp_9f8b7a6d $experiment_backend {
            "123e4567-e89b-12d3-a456-42661417400" "demo-microservice-experiment.default.svc.cluster.local:80";
            default "demo-microservice-production.default.svc.cluster.local:80";
        }
        
        # Health check endpoint
        server {
            listen 8080;
            location /health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }
        }
        
        # Main server
        server {
            listen 80;
            server_name _;
            
            # Health check para el proxy
            location /proxy/health {
                access_log off;
                return 200 "smart-proxy-healthy\n";
                add_header Content-Type text/plain;
            }
            
            # Endpoint para verificar configuración
            location /proxy/config {
                access_log off;
                return 200 "Smart Proxy - Auto-detecting services\nProduction: demo-microservice-production:80\nExperiment: Auto-detected\nHeader: aws-cf-cd-super-svp-9f8b7a6d\n";
                add_header Content-Type text/plain;
            }
            
            # Endpoint para verificar qué servicios están disponibles
            location /proxy/services {
                access_log off;
                content_by_lua_block {
                    local http = require "resty.http"
                    local httpc = http.new()
                    
                    -- Verificar servicio de producción
                    local prod_ok = false
                    local res, err = httpc:request_uri("http://demo-microservice-production.default.svc.cluster.local/health")
                    if res and res.status == 200 then
                        prod_ok = true
                    end
                    
                    -- Verificar servicio de experimento
                    local exp_ok = false
                    local res, err = httpc:request_uri("http://demo-microservice-experiment.default.svc.cluster.local/health")
                    if res and res.status == 200 then
                        exp_ok = true
                    end
                    
                    ngx.header.content_type = "application/json"
                    ngx.say('{"production": ' .. tostring(prod_ok) .. ', "experiment": ' .. tostring(exp_ok) .. '}')
                }
            }
            
            # Enrutamiento principal con fallback automático
            location / {
                # Headers estándar
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                
                # Timeout settings
                proxy_connect_timeout 5s;
                proxy_send_timeout 30s;
                proxy_read_timeout 30s;
                proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
                
                # Si hay header de experimento, intentar experimento primero
                if ($http_aws_cf_cd_super_svp_9f8b7a6d = "123e4567-e89b-12d3-a456-42661417400") {
                    proxy_pass http://$experiment_backend;
                    add_header X-Routed-To "experiment-attempt" always;
                    # Si falla, nginx automáticamente hará fallback por proxy_next_upstream
                    break;
                }
                
                # Tráfico normal siempre va a producción
                proxy_pass http://demo-microservice-production.default.svc.cluster.local:80;
                add_header X-Routed-To "production" always;
            }
        }
    }

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: smart-proxy
  namespace: default
  labels:
    app: smart-proxy
    tier: infrastructure
spec:
  replicas: 1
  selector:
    matchLabels:
      app: smart-proxy
  template:
    metadata:
      labels:
        app: smart-proxy
        tier: infrastructure
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 80
          name: http
        - containerPort: 8080
          name: health
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 2
          periodSeconds: 5
      volumes:
      - name: nginx-config
        configMap:
          name: smart-proxy-config

---
apiVersion: v1
kind: Service
metadata:
  name: smart-proxy
  namespace: default
  labels:
    app: smart-proxy
    tier: infrastructure
spec:
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: health
  selector:
    app: smart-proxy
  type: LoadBalancer