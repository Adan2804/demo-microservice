# Proxy inteligente para enrutar tráfico entre producción y experimento
# Comparte la misma URL pero enruta según headers
apiVersion: v1
kind: ConfigMap
metadata:
  name: intelligent-proxy-config
  namespace: default
data:
  nginx.conf: |
    events {
        worker_connections 1024;
    }
    
    http {
        # Logs para debugging
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                       '$status $body_bytes_sent "$http_referer" '
                       '"$http_user_agent" "$http_x_forwarded_for" '
                       'experiment_header="$http_aws_cf_cd_super_svp_9f8b7a6d"';
        
        access_log /var/log/nginx/access.log main;
        error_log /var/log/nginx/error.log warn;
        
        # Backend de producción (Azure DevOps deployment)
        upstream production_backend {
            server demo-microservice-production:80;
        }
        
        # Backend experimental (Argo experiment) - con fallback
        upstream experiment_backend {
            server demo-microservice-experiment:80 max_fails=1 fail_timeout=1s;
            server demo-microservice-production:80 backup;
        }
        
        # Health check endpoint
        server {
            listen 8080;
            location /health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }
        }
        
        # Main server
        server {
            listen 80;
            server_name _;
            
            # Health check para el proxy
            location /proxy/health {
                access_log off;
                return 200 "proxy-healthy\n";
                add_header Content-Type text/plain;
            }
            
            # Endpoint para verificar configuración
            location /proxy/config {
                access_log off;
                return 200 "Production: demo-microservice-production:80\nExperiment: demo-microservice-experiment:80\nHeader: aws-cf-cd-super-svp-9f8b7a6d\n";
                add_header Content-Type text/plain;
            }
            
            # Enrutamiento principal
            location / {
                # Headers estándar
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                
                # Timeout settings
                proxy_connect_timeout 10s;
                proxy_send_timeout 30s;
                proxy_read_timeout 30s;
                
                # Verificar header específico para experimento
                if ($http_aws_cf_cd_super_svp_9f8b7a6d = "123e4567-e89b-12d3-a456-42661417400") {
                    # Intentar experimento, si falla ir a producción
                    proxy_pass http://experiment_backend;
                    add_header X-Routed-To "experiment" always;
                    break;
                }
                
                # Tráfico normal va a producción (Azure DevOps)
                proxy_pass http://production_backend;
                add_header X-Routed-To "production" always;
            }
        }
    }

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: intelligent-proxy
  namespace: default
  labels:
    app: intelligent-proxy
    tier: infrastructure
spec:
  replicas: 2  # Alta disponibilidad
  selector:
    matchLabels:
      app: intelligent-proxy
  template:
    metadata:
      labels:
        app: intelligent-proxy
        tier: infrastructure
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 80
          name: http
        - containerPort: 8080
          name: health
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: nginx-config
        configMap:
          name: intelligent-proxy-config

---
apiVersion: v1
kind: Service
metadata:
  name: intelligent-proxy
  namespace: default
  labels:
    app: intelligent-proxy
    tier: infrastructure
spec:
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: health
  selector:
    app: intelligent-proxy
  type: LoadBalancer  # En producción sería ClusterIP con Ingress