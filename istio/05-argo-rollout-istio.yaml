# Argo Rollout configurado para Istio
# Usa subset-level traffic splitting como en la documentación

apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: demo-microservice-rollout-istio
  namespace: default
  labels:
    app: demo-microservice-rollout
    managed-by: argo-rollouts-istio
spec:
  replicas: 3
  strategy:
    canary:
      # Configuración específica para Istio
      trafficRouting:
        istio:
          virtualService:
            name: demo-microservice-rollout
            routes:
            - primary
          destinationRule:
            name: demo-microservice-destination
            canarySubsetName: rollout-canary
            stableSubsetName: rollout-stable
      
      # Pasos del canary deployment
      steps:
      - setWeight: 10    # 10% tráfico a canary
      - pause: 
          duration: 30s  # Pausa 30 segundos
      - setWeight: 25    # 25% tráfico a canary
      - pause: 
          duration: 60s  # Pausa 1 minuto
      - setWeight: 50    # 50% tráfico a canary
      - pause: 
          duration: 120s # Pausa 2 minutos
      - setWeight: 75    # 75% tráfico a canary
      - pause: 
          duration: 60s  # Pausa 1 minuto
      - setWeight: 100   # 100% tráfico a canary (promoción completa)
      
      # Análisis automático durante el rollout
      analysis:
        templates:
        - templateName: success-rate-analysis-istio
        startingStep: 2
        args:
        - name: service-name
          value: demo-microservice.default.svc.cluster.local
  
  selector:
    matchLabels:
      app: demo-microservice-rollout
  
  template:
    metadata:
      labels:
        app: demo-microservice-rollout
        version: stable  # Se cambia a canary durante rollout
      annotations:
        sidecar.istio.io/inject: "true"  # Inyección automática de sidecar
    spec:
      containers:
      - name: demo-microservice
        image: demo-microservice:stable
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: PORT
          value: "3000"
        - name: APP_VERSION
          value: "rollout-istio-stable"
        - name: ENVIRONMENT
          value: "production-rollout-istio"
        - name: ISTIO_ENABLED
          value: "true"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10

---
# AnalysisTemplate para Istio
apiVersion: argoproj.io/v1alpha1
kind: AnalysisTemplate
metadata:
  name: success-rate-analysis-istio
  namespace: default
spec:
  args:
  - name: service-name
  metrics:
  - name: success-rate
    interval: 30s
    count: 5
    successCondition: result[0] >= 0.95
    failureLimit: 3
    provider:
      prometheus:
        address: http://prometheus.istio-system:9090
        query: |
          sum(rate(istio_requests_total{destination_service_name="{{args.service-name}}",response_code!~"5.*"}[2m])) /
          sum(rate(istio_requests_total{destination_service_name="{{args.service-name}}"}[2m]))
  
  - name: avg-response-time
    interval: 30s
    count: 5
    successCondition: result[0] <= 500
    failureLimit: 3
    provider:
      prometheus:
        address: http://prometheus.istio-system:9090
        query: |
          histogram_quantile(0.95,
            sum(rate(istio_request_duration_milliseconds_bucket{destination_service_name="{{args.service-name}}"}[2m])) by (le)
          )