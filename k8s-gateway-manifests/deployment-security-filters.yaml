apiVersion: apps/v1
kind: Deployment
metadata:
  name: security-filters-gateway
  namespace: #{namespace}#
  labels:
    app: security-filters-gateway
    component: gateway
    version: #{version}#
    dt-release-version: #{dt_release_version}#
    dt-build-version: #{dt_build_version}#
  annotations:
    deployment.kubernetes.io/revision: "1"
    argocd.argoproj.io/sync-wave: "2"
    checksum/config: #{config_checksum}#
    app.kubernetes.io/managed-by: "argocd"
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: security-filters-gateway
  template:
    metadata:
      labels:
        app: security-filters-gateway
        component: gateway
        version: #{version}#
        dt-release-version: #{dt_release_version}#
        dt-build-version: #{dt_build_version}#
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8081"
        prometheus.io/path: "/actuator/prometheus"
        checksum/config: #{config_checksum}#
        config.kubernetes.io/depends-on: "configmap/security-filters-config"
    spec:
      containers:
      - name: security-filters-gateway
        image: springcloudgateway/spring-cloud-gateway:3.1.0
        ports:
        - containerPort: 8080
          name: gateway
          protocol: TCP
        - containerPort: 8081
          name: management
          protocol: TCP
        env:
        - name: TARGET_URI
          valueFrom:
            configMapKeyRef:
              name: security-filters-config
              key: TARGET_URI
        - name: GATEWAY_PORT
          valueFrom:
            configMapKeyRef:
              name: security-filters-config
              key: GATEWAY_PORT
        - name: MANAGEMENT_PORT
          valueFrom:
            configMapKeyRef:
              name: security-filters-config
              key: MANAGEMENT_PORT
        - name: APP_VERSION
          value: "#{version}#"
        - name: SPRING_PROFILES_ACTIVE
          value: "production"
        - name: SERVER_PORT
          value: "8080"
        - name: MANAGEMENT_SERVER_PORT
          value: "8081"
        - name: MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE
          value: "health,info,metrics,prometheus,gateway"
        - name: MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS
          value: "always"
        - name: SPRING_APPLICATION_NAME
          value: "security-filters-gateway"
        - name: BUILD_NUMBER
          value: "#{dt_build_version}#"
        - name: RELEASE_VERSION
          value: "#{dt_release_version}#"
        - name: CONFIG_CHECKSUM
          value: "#{config_checksum}#"
        # Configuraci√≥n de rutas via env vars (alternativa al archivo)
        - name: SPRING_CLOUD_GATEWAY_ROUTES_0_ID
          value: "demo-microservice-route"
        - name: SPRING_CLOUD_GATEWAY_ROUTES_0_URI
          value: "#{target_uri}#"
        - name: SPRING_CLOUD_GATEWAY_ROUTES_0_PREDICATES_0
          value: "Path=/demo/**"
        - name: SPRING_CLOUD_GATEWAY_ROUTES_0_FILTERS_0
          value: "AddResponseHeader=X-Gateway-Version,#{version}#"
        - name: SPRING_CLOUD_GATEWAY_ROUTES_0_FILTERS_1
          value: "AddResponseHeader=X-Routed-By,security-filters-gateway"
        - name: SPRING_CLOUD_GATEWAY_ROUTES_0_FILTERS_2
          value: "RemoveRequestHeader=X-Internal-Token"
        volumeMounts:
        - name: config-volume
          mountPath: /config
          readOnly: true
        - name: security-config-volume
          mountPath: /security-config
          readOnly: true
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: 8081
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8081
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "sleep 15"]
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
              - ALL
      volumes:
      - name: config-volume
        configMap:
          name: security-filters-config
          items:
          - key: application.yml
            path: application.yml
      - name: security-config-volume
        configMap:
          name: security-filters-config
          items:
          - key: security-config.yml
            path: security-config.yml
      terminationGracePeriodSeconds: 30
      securityContext:
        fsGroup: 1000

---
apiVersion: v1
kind: Service
metadata:
  name: security-filters-gateway
  namespace: #{namespace}#
  labels:
    app: security-filters-gateway
    service: security-filters-gateway
  annotations:
    argocd.argoproj.io/sync-wave: "1"
    service.kubernetes.io/topology-aware-hints: auto
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: gateway
  - port: 8081
    targetPort: 8081
    protocol: TCP
    name: management
  selector:
    app: security-filters-gateway

---
apiVersion: v1
kind: Service
metadata:
  name: security-filters-gateway-internal
  namespace: #{namespace}#
  labels:
    app: security-filters-gateway
    service: security-filters-gateway-internal
  annotations:
    argocd.argoproj.io/sync-wave: "1"
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: gateway
  - port: 8081
    targetPort: 8081
    protocol: TCP
    name: management
  selector:
    app: security-filters-gateway