#!/bin/bash

# Script para promover experimento exitoso a rollout con Argo Rollouts
# Implementa Blue-Green deployment con confirmaci√≥n manual
set -e

echo "üöÄ PROMOCI√ìN DE EXPERIMENTO A ROLLOUT"
echo "====================================="

cd "$(dirname "$0")/.."

# Funci√≥n para mostrar ayuda
show_help() {
    echo "Uso: $0 [OPCIONES]"
    echo ""
    echo "Opciones:"
    echo "  --auto-approve          Aprobar autom√°ticamente sin confirmaci√≥n"
    echo "  --rollback-on-failure   Rollback autom√°tico si falla"
    echo "  -h, --help              Mostrar esta ayuda"
    echo ""
    echo "Ejemplos:"
    echo "  $0                      # Promoci√≥n con confirmaci√≥n manual"
    echo "  $0 --auto-approve       # Promoci√≥n autom√°tica"
}

# Valores por defecto
AUTO_APPROVE=false
ROLLBACK_ON_FAILURE=false

# Procesar argumentos
while [[ $# -gt 0 ]]; do
    case $1 in
        --auto-approve)
            AUTO_APPROVE=true
            shift
            ;;
        --rollback-on-failure)
            ROLLBACK_ON_FAILURE=true
            shift
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        *)
            echo "‚ùå Opci√≥n desconocida: $1"
            show_help
            exit 1
            ;;
    esac
done

# 1. VERIFICAR PREREQUISITOS
echo ""
echo "üìã VERIFICANDO PREREQUISITOS..."

# Verificar que el experimento est√© activo
if ! kubectl get deployment demo-microservice-experiment >/dev/null 2>&1; then
    echo "‚ùå Error: No hay experimento activo para promover"
    echo "Ejecuta primero: ./scripts/start-experiment.sh"
    exit 1
fi

# Verificar que Argo Rollouts est√© instalado
echo "üîç Verificando instalaci√≥n de Argo Rollouts..."
if ! kubectl get crd rollouts.argoproj.io >/dev/null 2>&1; then
    echo "‚ö†Ô∏è  Argo Rollouts no est√° instalado. Instalando..."
    kubectl create namespace argo-rollouts --dry-run=client -o yaml | kubectl apply -f -
    kubectl apply -n argo-rollouts -f https://github.com/argoproj/argo-rollouts/releases/latest/download/install.yaml
    
    echo "‚è≥ Esperando que Argo Rollouts est√© listo..."
    kubectl wait --for=condition=available deployment/argo-rollouts -n argo-rollouts --timeout=300s
    echo "‚úÖ Argo Rollouts instalado correctamente"
else
    echo "‚úÖ Argo Rollouts ya est√° instalado"
    
    # Verificar que el controller est√© corriendo
    if ! kubectl get deployment argo-rollouts -n argo-rollouts >/dev/null 2>&1; then
        echo "‚ö†Ô∏è  Controller de Argo Rollouts no encontrado, reinstalando..."
        kubectl apply -n argo-rollouts -f https://github.com/argoproj/argo-rollouts/releases/latest/download/install.yaml
        kubectl wait --for=condition=available deployment/argo-rollouts -n argo-rollouts --timeout=300s
    fi
fi

# Verificar kubectl argo rollouts plugin
if ! kubectl argo rollouts version >/dev/null 2>&1; then
    echo "‚ö†Ô∏è  Plugin 'kubectl argo rollouts' no est√° instalado"
    echo "üí° Puedes instalarlo desde: https://argoproj.github.io/argo-rollouts/installation/#kubectl-plugin-installation"
    echo "   O usar comandos kubectl directamente"
fi

echo "‚úÖ Prerequisitos verificados"

# 2. OBTENER INFORMACI√ìN DEL EXPERIMENTO
echo ""
echo "üìä ANALIZANDO EXPERIMENTO ACTUAL..."

EXPERIMENT_IMAGE=$(kubectl get deployment demo-microservice-experiment -o jsonpath='{.spec.template.spec.containers[0].image}')
EXPERIMENT_VERSION=$(kubectl get deployment demo-microservice-experiment -o jsonpath='{.metadata.annotations.experiment\.kubernetes\.io/version}')

echo "üì¶ Imagen del experimento: $EXPERIMENT_IMAGE"
echo "üè∑Ô∏è  Versi√≥n del experimento: $EXPERIMENT_VERSION"

# Mostrar m√©tricas del experimento
echo ""
echo "üìà M√âTRICAS DEL EXPERIMENTO:"
kubectl top pods -l version=experiment --no-headers 2>/dev/null || echo "M√©tricas no disponibles"

# 3. CONFIRMACI√ìN MANUAL (si no es auto-approve)
if [ "$AUTO_APPROVE" = false ]; then
    echo ""
    echo "ü§î CONFIRMACI√ìN DE PROMOCI√ìN"
    echo "============================"
    echo ""
    echo "¬øHas validado que el experimento funciona correctamente?"
    echo "‚Ä¢ ¬øLas pruebas A/B muestran resultados positivos?"
    echo "‚Ä¢ ¬øNo hay errores en los logs del experimento?"
    echo "‚Ä¢ ¬øEl rendimiento es aceptable?"
    echo ""
    read -p "¬øEst√°s seguro de promover el experimento a producci√≥n? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "‚ùå Promoci√≥n cancelada por el usuario"
        exit 0
    fi
fi

# 4. APLICAR ROLLOUT CONFIGURATION
echo ""
echo "üìù APLICANDO CONFIGURACI√ìN DE ROLLOUT..."

# Actualizar la imagen en el archivo de rollout con la imagen del experimento
echo "üì¶ Actualizando imagen del rollout a: $EXPERIMENT_IMAGE"

# Crear copia temporal del rollout con la imagen del experimento
cat experiments/05-rollout-ab-testing.yaml | \
    sed "s|image: zadan04/demo-microservice:stable|image: $EXPERIMENT_IMAGE|g" | \
    sed "s|value: \"stable-v1.0.0\"|value: \"rollout-promoted-${EXPERIMENT_VERSION:-v1.1.0}\"|g" > /tmp/rollout-config.yaml

# Mostrar preview del cambio
echo "üìã Configuraci√≥n del rollout:"
grep -A 2 "image:" /tmp/rollout-config.yaml | head -3

# 5. APLICAR ROLLOUT
echo ""
echo "üöÄ INICIANDO ROLLOUT BLUE-GREEN..."

# Aplicar el rollout desde el archivo temporal
kubectl apply -f /tmp/rollout-config.yaml

# Esperar que el rollout est√© listo
echo "‚è≥ Esperando que el rollout est√© listo..."
sleep 10

# Verificar estado del rollout
if kubectl get rollout demo-microservice-rollout >/dev/null 2>&1; then
    echo "‚úÖ Rollout creado exitosamente"
    kubectl get rollout demo-microservice-rollout
else
    echo "‚ùå Error: Rollout no se cre√≥ correctamente"
    exit 1
fi

# 6. ACTUALIZAR CONFIGURACI√ìN DE ISTIO PARA ROLLOUT
echo ""
echo "üåê ACTUALIZANDO CONFIGURACI√ìN DE ISTIO PARA ROLLOUT..."

# Crear DestinationRule para rollout
cat > /tmp/destination-rule-rollout.yaml << EOF
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: demo-microservice-rollout-destination
  namespace: default
  annotations:
    rollout.kubernetes.io/managed-by: "rollout-script"
spec:
  host: demo-microservice-rollout-active
  subsets:
  - name: rollout-stable
    labels:
      version: rollout-stable
  - name: rollout-canary
    labels:
      version: rollout-new
EOF

# Crear VirtualService para rollout
cat > /tmp/virtual-service-rollout.yaml << EOF
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: demo-microservice-rollout-routing
  namespace: default
  annotations:
    rollout.kubernetes.io/managed-by: "rollout-script"
spec:
  hosts:
  - "*"
  gateways:
  - demo-microservice-gateway
  http:
  # Tr√°fico de rollout (gradual)
  - match:
    - uri:
        prefix: "/api/v1/rollout"
    route:
    - destination:
        host: demo-microservice-rollout-active
      weight: 100
    headers:
      response:
        add:
          x-routed-to: "rollout-active"
          x-rollout-phase: "blue-green"
  
  # Tr√°fico normal (sigue yendo al experimento por ahora)
  - match:
    - uri:
        prefix: "/"
    route:
    - destination:
        host: demo-microservice-istio
        subset: stable
      weight: 70
    - destination:
        host: demo-microservice-istio
        subset: experiment
      weight: 30
    headers:
      response:
        add:
          x-routed-to: "mixed-traffic"
          x-rollout-phase: "transition"
EOF

kubectl apply -f /tmp/destination-rule-rollout.yaml
kubectl apply -f /tmp/virtual-service-rollout.yaml

# Esperar que la configuraci√≥n se propague
echo "‚è≥ Esperando que la configuraci√≥n se propague..."
sleep 15

# 7. MONITOREAR ROLLOUT
echo ""
echo "üìä MONITOREANDO ROLLOUT..."

echo "Estado del rollout:"
kubectl get rollout demo-microservice-rollout

echo ""
echo "Pods del rollout:"
kubectl get pods -l app=demo-microservice-istio,tier=rollout

# 8. PROMOCI√ìN MANUAL DEL ROLLOUT
echo ""
echo "üéØ PROMOCI√ìN DEL ROLLOUT"
echo "========================"

if [ "$AUTO_APPROVE" = false ]; then
    echo ""
    echo "El rollout est√° en modo Blue-Green y requiere promoci√≥n manual."
    echo "Revisa las m√©tricas y confirma que todo funciona correctamente."
    echo ""
    echo "üìä Estado actual del rollout:"
    kubectl get rollout demo-microservice-rollout -o wide
    echo ""
    read -p "¬øPromover el rollout a producci√≥n? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo "üöÄ Promoviendo rollout..."
        if kubectl argo rollouts promote demo-microservice-rollout 2>/dev/null; then
            echo "‚úÖ Rollout promovido con plugin"
        else
            echo "‚ö†Ô∏è  Plugin no disponible, usando kubectl patch..."
            kubectl patch rollout demo-microservice-rollout --type merge -p '{"status":{"pauseConditions":[]}}'
        fi
    else
        echo "‚è∏Ô∏è  Rollout pausado. Puedes promoverlo manualmente con:"
        echo "kubectl argo rollouts promote demo-microservice-rollout"
        echo "O con kubectl:"
        echo "kubectl patch rollout demo-microservice-rollout --type merge -p '{\"status\":{\"pauseConditions\":[]}}'"
    fi
else
    echo "üöÄ Promoci√≥n autom√°tica habilitada..."
    if kubectl argo rollouts promote demo-microservice-rollout 2>/dev/null; then
        echo "‚úÖ Rollout promovido con plugin"
    else
        echo "‚ö†Ô∏è  Plugin no disponible, usando kubectl patch..."
        kubectl patch rollout demo-microservice-rollout --type merge -p '{"status":{"pauseConditions":[]}}'
    fi
fi

# 9. LIMPIAR EXPERIMENTO
echo ""
echo "üßπ LIMPIANDO EXPERIMENTO ANTERIOR..."

echo "Eliminando deployment del experimento..."
kubectl delete deployment demo-microservice-experiment

echo "Restaurando configuraci√≥n base de Istio..."
kubectl apply -f argocd-production/03-destination-rule.yaml
kubectl apply -f argocd-production/04-virtual-service.yaml

# 10. VERIFICAR ESTADO FINAL
echo ""
echo "üîç VERIFICANDO ESTADO FINAL..."

echo "Estado del rollout:"
kubectl get rollout demo-microservice-rollout

echo ""
echo "Pods activos:"
kubectl get pods -l app=demo-microservice-istio

echo ""
echo "Servicios:"
kubectl get svc -l app=demo-microservice-istio

# 11. PRUEBAS DE CONECTIVIDAD
echo ""
echo "üß™ REALIZANDO PRUEBAS FINALES..."

echo "Probando tr√°fico normal:"
response=$(curl -s http://localhost:8080/api/v1/experiment/version 2>/dev/null || echo "Error de conexi√≥n")
echo "Respuesta: $response"

echo ""
echo "Probando endpoint de rollout:"
response=$(curl -s http://localhost:8080/api/v1/rollout/version 2>/dev/null || echo "Error de conexi√≥n")
echo "Respuesta: $response"

# 12. RESUMEN FINAL
echo ""
echo "üéâ PROMOCI√ìN A ROLLOUT COMPLETADA"
echo "================================="
echo ""
echo "‚úÖ Experimento promovido exitosamente"
echo "‚úÖ Rollout Blue-Green configurado (usando experiments/05-rollout-ab-testing.yaml)"
echo "‚úÖ Argo Rollouts instalado y verificado"
echo "‚úÖ Configuraci√≥n de Istio actualizada"
echo "‚úÖ Experimento anterior limpiado"
echo ""
echo "üìä ESTADO ACTUAL:"
echo "‚Ä¢ Rollout activo: demo-microservice-rollout"
echo "‚Ä¢ Estrategia: Blue-Green Deployment"
echo "‚Ä¢ Imagen promovida: $EXPERIMENT_IMAGE"
echo "‚Ä¢ Services: demo-microservice-istio-active, demo-microservice-istio-preview"
echo ""
echo "üåê ACCESOS:"
echo "‚Ä¢ Service Active: demo-microservice-istio-active (producci√≥n actual)"
echo "‚Ä¢ Service Preview: demo-microservice-istio-preview (nueva versi√≥n)"
echo "‚Ä¢ Argo Rollouts Dashboard: kubectl argo rollouts dashboard"
echo ""
echo "üìä MONITOREO:"
echo "‚Ä¢ Estado del rollout: kubectl get rollout demo-microservice-rollout"
echo "‚Ä¢ Ver detalles: kubectl argo rollouts get rollout demo-microservice-rollout"
echo "‚Ä¢ Logs active: kubectl logs -l app=demo-microservice-istio -c demo-microservice"
echo "‚Ä¢ M√©tricas: kubectl top pods -l app=demo-microservice-istio"
echo ""
echo "üöÄ PR√ìXIMOS PASOS:"
echo "1. Verificar service preview: kubectl port-forward svc/demo-microservice-istio-preview 8081:80"
echo "2. Probar nueva versi√≥n: curl http://localhost:8081/demo/info"
echo "3. Si todo est√° bien, promover: kubectl argo rollouts promote demo-microservice-rollout"
echo "4. Monitorear an√°lisis post-promoci√≥n"
echo ""
echo "üõë EN CASO DE PROBLEMAS:"
echo "‚Ä¢ Rollback: kubectl argo rollouts abort demo-microservice-rollout"
echo "‚Ä¢ Ver estado detallado: kubectl argo rollouts get rollout demo-microservice-rollout --watch"
echo "‚Ä¢ Ver an√°lisis: kubectl get analysisrun"
echo ""
echo "üí° NOTA:"
echo "El rollout usa Blue-Green con an√°lisis autom√°tico de m√©tricas (requiere Prometheus)."
echo "Si Prometheus no est√° disponible, el an√°lisis fallar√° pero puedes promover manualmente."