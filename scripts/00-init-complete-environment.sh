#!/bin/bash

# Script de inicializaci√≥n completa del entorno
# Minikube + Istio + Despliegue de Producci√≥n + Configuraci√≥n completa
set -e

echo "üöÄ INICIALIZANDO ENTORNO COMPLETO PARA TESTING EN PRODUCCI√ìN"
echo "=============================================================="

cd "$(dirname "$0")/.."

# Funci√≥n para verificar si un comando existe
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Funci√≥n para esperar que un deployment est√© listo
wait_for_deployment() {
    local deployment=$1
    local namespace=${2:-default}
    echo "Esperando que $deployment est√© listo..."
    kubectl wait --for=condition=available deployment/$deployment -n $namespace --timeout=300s
}

# 1. VERIFICAR DEPENDENCIAS
echo ""
echo "üìã VERIFICANDO DEPENDENCIAS..."

if ! command_exists minikube; then
    echo "‚ùå minikube no est√° instalado"
    exit 1
fi

if ! command_exists kubectl; then
    echo "‚ùå kubectl no est√° instalado"
    exit 1
fi

# Verificar istioctl (local o sistema)
ISTIOCTL_PATH=""
if [ -f "./bin/istioctl" ]; then
    ISTIOCTL_PATH="./bin/istioctl"
    echo "‚úÖ Usando istioctl local: ./bin/istioctl"
elif command_exists istioctl; then
    ISTIOCTL_PATH="istioctl"
    echo "‚úÖ Usando istioctl del sistema"
else
    echo "‚ùå istioctl no est√° disponible. Ejecuta primero:"
    echo "./scripts/install-istio-wsl.sh"
    exit 1
fi

echo "‚úÖ Todas las dependencias est√°n instaladas"

# 2. INICIAR MINIKUBE
echo ""
echo "üîß CONFIGURANDO MINIKUBE..."

# Verificar si minikube ya est√° corriendo
if minikube status | grep -q "Running"; then
    echo "‚úÖ Minikube ya est√° corriendo"
else
    echo "Iniciando Minikube con configuraci√≥n optimizada..."
    minikube start \
        --cpus=4 \
        --memory=8192 \
        --disk-size=20g \
        --driver=docker
fi

# Habilitar addons necesarios
echo "Habilitando addons de Minikube..."
minikube addons enable metrics-server
minikube addons enable ingress

# 3. INSTALAR ISTIO
echo ""
echo "üï∏Ô∏è  INSTALANDO ISTIO SERVICE MESH..."

# Verificar si Istio ya est√° instalado
if kubectl get namespace istio-system >/dev/null 2>&1; then
    echo "‚úÖ Istio ya est√° instalado"
else
    echo "Instalando Istio..."
    "$ISTIOCTL_PATH" install --set values.defaultRevision=default -y
    
    # Habilitar inyecci√≥n autom√°tica de sidecar
    kubectl label namespace default istio-injection=enabled --overwrite
fi

# Verificar que Istio est√© funcionando
wait_for_deployment istiod istio-system
wait_for_deployment istio-ingressgateway istio-system


# 5. LIMPIAR DEPLOYMENTS ANTERIORES
echo ""
echo "üßπ LIMPIANDO DEPLOYMENTS ANTERIORES..."

# Limpiar deployments antiguos (sin Istio)
echo "Eliminando deployments antiguos..."
kubectl delete deployment demo-microservice-production --ignore-not-found=true
kubectl delete deployment intelligent-proxy --ignore-not-found=true
kubectl delete deployment demo-microservice-experiment --ignore-not-found=true

# Limpiar servicios antiguos
echo "Eliminando servicios antiguos..."
kubectl delete service demo-microservice-stable --ignore-not-found=true
kubectl delete service demo-microservice-experiment --ignore-not-found=true
kubectl delete service intelligent-proxy --ignore-not-found=true

# Limpiar ConfigMaps antiguos
echo "Eliminando ConfigMaps antiguos..."
kubectl delete configmap intelligent-proxy-config --ignore-not-found=true

echo "‚úÖ Limpieza completada"

# 6. DESPLEGAR APLICACI√ìN CON ISTIO
echo ""
echo "üèóÔ∏è  DESPLEGANDO APLICACI√ìN CON ISTIO..."

# Verificar y construir im√°genes si es necesario
if ! minikube image ls | grep -q demo-microservice:stable; then
    echo "Construyendo im√°genes con versiones diferentes..."
    
    # Configurar Docker para usar el daemon de Minikube
    eval $(minikube docker-env)
    
    # Imagen STABLE para producci√≥n
    docker build -t demo-microservice:stable \
      --build-arg NODE_ENV=production \
      --build-arg APP_VERSION=stable-v1.0.0 \
      --build-arg EXPERIMENT_ENABLED=false \
      .
    
    # Imagen EXPERIMENTAL para pruebas
    docker build -t demo-microservice:experiment-candidate-v1.1.0 \
      --build-arg NODE_ENV=production \
      --build-arg APP_VERSION=experiment-candidate-v1.1.0 \
      --build-arg EXPERIMENT_ENABLED=true \
      .
    
    echo "‚úÖ Im√°genes construidas y cargadas en Minikube"
fi

# Desplegar aplicaci√≥n de producci√≥n con Istio
echo "Desplegando aplicaci√≥n de producci√≥n con Istio..."
kubectl apply -f istio/01-production-deployment-istio.yaml

# Esperar que el deployment est√© listo
wait_for_deployment demo-microservice-production-istio

# Reiniciar pods para aplicar nuevas configuraciones
echo "Reiniciando pods para aplicar configuraciones actualizadas..."
kubectl rollout restart deployment/demo-microservice-production-istio
kubectl rollout status deployment/demo-microservice-production-istio

# 7. CONFIGURAR ISTIO SERVICE MESH
echo ""
echo "üåê CONFIGURANDO ISTIO SERVICE MESH..."

# Aplicar servicio unificado y Gateway
echo "Aplicando servicio unificado y Gateway..."
kubectl apply -f istio/02-service-unified.yaml

echo "Aplicando DestinationRule..."
kubectl apply -f istio/03-destination-rule.yaml

echo "Aplicando VirtualService..."
kubectl apply -f istio/04-virtual-service.yaml

# Esperar que la configuraci√≥n se propague
echo "Esperando que la configuraci√≥n de Istio se propague..."
sleep 15

# 8. CONFIGURAR PORT-FORWARDS
echo ""
echo "üîå CONFIGURANDO ACCESOS..."

# Limpiar port-forwards existentes
pkill -f "kubectl port-forward" 2>/dev/null || true
sleep 2

# Port-forward para Istio Gateway
echo "Configurando acceso a Istio Gateway..."
kubectl port-forward -n istio-system svc/istio-ingressgateway 8080:80 > /dev/null 2>&1 &
GATEWAY_PF_PID=$!

# Port-forward para Argo Rollouts Dashboard (si existe)
if kubectl get svc argo-rollouts-dashboard -n argo-rollouts >/dev/null 2>&1; then
    echo "Configurando acceso a Argo Rollouts Dashboard..."
    kubectl port-forward -n argo-rollouts svc/argo-rollouts-dashboard 3100:3100 > /dev/null 2>&1 &
    DASHBOARD_PF_PID=$!
else
    echo "‚ö†Ô∏è  Dashboard de Argo Rollouts no disponible"
    DASHBOARD_PF_PID=""
fi

sleep 5

# 9. VERIFICAR INSTALACI√ìN
echo ""
echo "üîç VERIFICANDO INSTALACI√ìN..."

# Verificar pods
echo "Estado de los pods:"
kubectl get pods -o wide

# Verificar servicios
echo ""
echo "Estado de los servicios:"
kubectl get svc

# Verificar configuraci√≥n de Istio
echo ""
echo "Analizando configuraci√≥n de Istio..."
"$ISTIOCTL_PATH" analyze

# 10. PRUEBAS DE CONECTIVIDAD
echo ""
echo "üß™ REALIZANDO PRUEBAS DE CONECTIVIDAD..."

echo "Esperando que los servicios est√©n listos..."
sleep 10

echo ""
echo "Probando tr√°fico normal (debe ir a producci√≥n):"
response=$(curl -s http://localhost:8080/api/v1/experiment/version 2>/dev/null || echo "Error de conexi√≥n")
echo "Respuesta: $response"

echo ""
echo "Probando tr√°fico experimental (debe ir a producci√≥n - experimento a√∫n no creado):"
response=$(curl -s -H "aws-cf-cd-super-svp-9f8b7a6d: 123e4567-e89b-12d3-a456-42661417400" \
    http://localhost:8080/api/v1/experiment/version 2>/dev/null || echo "Error de conexi√≥n")
echo "Respuesta: $response"

# 11. RESUMEN FINAL
echo ""
echo "üéâ ENTORNO INICIALIZADO CORRECTAMENTE"
echo "====================================="
echo ""
echo "‚úÖ Minikube: Corriendo"
echo "‚úÖ Istio Service Mesh: Instalado y configurado"
echo "‚úÖ Argo Rollouts: Verificado"
echo "‚úÖ Aplicaci√≥n de Producci√≥n con Istio: Desplegada (3 pods)"
echo "‚úÖ Gateway y VirtualService de Istio: Configurados"
echo ""
echo "üåê ACCESOS DISPONIBLES:"
echo "‚Ä¢ Aplicaci√≥n: http://localhost:8080"
echo "‚Ä¢ Argo Rollouts Dashboard: http://localhost:3100"
echo ""
echo "üìä DASHBOARDS OPCIONALES:"
echo "‚Ä¢ Kiali (Service Mesh): kubectl port-forward -n istio-system svc/kiali 20001:20001"
echo "‚Ä¢ Grafana (M√©tricas): kubectl port-forward -n istio-system svc/grafana 3000:3000"
echo "‚Ä¢ Jaeger (Tracing): kubectl port-forward -n istio-system svc/jaeger 16686:16686"
echo ""
echo "üöÄ PR√ìXIMOS PASOS:"
echo "1. Crear experimento: ./scripts/01-create-experiment.sh"
echo "2. Promover a rollout: ./scripts/02-promote-to-rollout.sh"
echo ""
echo "üìù COMANDOS √öTILES:"
echo "‚Ä¢ Ver estado: kubectl get pods,svc"
echo "‚Ä¢ Logs de aplicaci√≥n: kubectl logs -l app=demo-microservice"
echo "‚Ä¢ Estado de Istio: $ISTIOCTL_PATH proxy-status"
echo "‚Ä¢ An√°lisis de Istio: $ISTIOCTL_PATH analyze"
echo ""
if [ -n "$DASHBOARD_PF_PID" ]; then
    echo "Port-forwards activos (PIDs: $GATEWAY_PF_PID, $DASHBOARD_PF_PID)"
else
    echo "Port-forwards activos (PID: $GATEWAY_PF_PID)"
fi
echo "Para detener: pkill -f 'kubectl port-forward'"