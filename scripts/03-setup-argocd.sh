#!/bin/bash

# Script para configurar ArgoCD y gestionar el proyecto desde la interfaz web
set -e

echo "üöÄ CONFIGURANDO ARGOCD PARA GESTI√ìN DEL PROYECTO"
echo "================================================"

cd "$(dirname "$0")/.."

# Funci√≥n para mostrar ayuda
show_help() {
    echo "Uso: $0 [OPCIONES]"
    echo ""
    echo "Opciones:"
    echo "  --skip-install      Saltar instalaci√≥n de ArgoCD (si ya est√° instalado)"
    echo "  -h, --help          Mostrar esta ayuda"
    echo ""
    echo "Ejemplos:"
    echo "  $0                  # Instalaci√≥n completa"
    echo "  $0 --skip-install   # Solo configurar proyecto (ArgoCD ya instalado)"
}

# Valores por defecto
SKIP_INSTALL=false

# Procesar argumentos
while [[ $# -gt 0 ]]; do
    case $1 in
        --skip-install)
            SKIP_INSTALL=true
            shift
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        *)
            echo "‚ùå Opci√≥n desconocida: $1"
            show_help
            exit 1
            ;;
    esac
done

# Funci√≥n para esperar que un deployment est√© listo
wait_for_deployment() {
    local deployment=$1
    local namespace=${2:-default}
    echo "Esperando que $deployment est√© listo en namespace $namespace..."
    kubectl wait --for=condition=available deployment/$deployment -n $namespace --timeout=300s
}

# 1. VERIFICAR DEPENDENCIAS
echo ""
echo "üìã VERIFICANDO DEPENDENCIAS..."

if ! kubectl cluster-info >/dev/null 2>&1; then
    echo "‚ùå Cluster de Kubernetes no disponible"
    echo "Ejecuta primero: minikube start"
    exit 1
fi

echo "‚úÖ Kubernetes disponible"

# 2. INSTALAR ARGOCD (si no est√° instalado)
if [ "$SKIP_INSTALL" = false ]; then
    echo ""
    echo "üîß INSTALANDO ARGOCD..."
    
    # Crear namespace
    kubectl create namespace argocd --dry-run=client -o yaml | kubectl apply -f -
    
    # Verificar si ArgoCD ya est√° instalado
    if kubectl get deployment argocd-server -n argocd >/dev/null 2>&1; then
        echo "‚úÖ ArgoCD ya est√° instalado"
    else
        echo "Instalando ArgoCD..."
        kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
        
        echo "Esperando que ArgoCD est√© listo..."
        sleep 30
        wait_for_deployment argocd-server argocd
        wait_for_deployment argocd-repo-server argocd
        wait_for_deployment argocd-dex-server argocd
    fi
else
    echo ""
    echo "‚è≠Ô∏è  SALTANDO INSTALACI√ìN DE ARGOCD..."
    
    # Verificar que ArgoCD est√© disponible
    if ! kubectl get deployment argocd-server -n argocd >/dev/null 2>&1; then
        echo "‚ùå ArgoCD no est√° instalado. Ejecuta sin --skip-install"
        exit 1
    fi
    echo "‚úÖ ArgoCD encontrado"
fi

# 3. CONFIGURAR ACCESO A ARGOCD
echo ""
echo "üîå CONFIGURANDO ACCESO A ARGOCD..."

# Cambiar el servicio a NodePort para acceso f√°cil
kubectl patch svc argocd-server -n argocd -p '{"spec":{"type":"NodePort"}}'

# Limpiar port-forwards existentes de ArgoCD
pkill -f "kubectl port-forward.*argocd" 2>/dev/null || true
sleep 2

# Configurar port-forward para ArgoCD
echo "Configurando port-forward para ArgoCD..."
kubectl port-forward svc/argocd-server -n argocd 8081:443 > /dev/null 2>&1 &
ARGOCD_PF_PID=$!

sleep 5

# 4. OBTENER CREDENCIALES
echo ""
echo "üîë OBTENIENDO CREDENCIALES DE ARGOCD..."

# Obtener password inicial del admin
ARGOCD_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)

echo "‚úÖ Credenciales obtenidas"

# 5. CREAR CONFIGURACIONES PARA ARGOCD
echo ""
echo "üìù CREANDO CONFIGURACIONES PARA ARGOCD..."

# Crear directorio para manifiestos de ArgoCD
mkdir -p argocd-manifests

# Configurar repositorio Git local primero
if [ ! -d ".git" ]; then
    echo "Inicializando repositorio Git..."
    git init
    git add .
    git commit -m "Initial commit - Demo Microservice with Istio"
else
    echo "Actualizando repositorio Git..."
    git add .
    git commit -m "Update ArgoCD configuration" || echo "No hay cambios para commitear"
fi

# Asegurar que la aplicaci√≥n base est√© desplegada
echo "Verificando archivos de Istio..."
echo "=== ARCHIVOS EN DIRECTORIO ISTIO ==="
ls -la istio/

echo ""
echo "Desplegando aplicaci√≥n base directamente (sin ArgoCD)..."

# Verificar cada archivo antes de aplicarlo
for file in istio/01-production-deployment-istio.yaml istio/02-service-unified.yaml istio/03-destination-rule.yaml istio/04-virtual-service.yaml; do
    if [ -f "$file" ]; then
        echo "‚úÖ Aplicando $file"
        kubectl apply -f "$file"
    else
        echo "‚ùå Archivo no encontrado: $file"
    fi
done

# Esperar que est√© listo
echo "Esperando que la aplicaci√≥n est√© lista..."
kubectl wait --for=condition=available deployment/demo-microservice-production-istio --timeout=300s || echo "‚ö†Ô∏è  Timeout esperando deployment"

echo "‚úÖ Aplicaci√≥n base desplegada"

echo ""
echo "=== VERIFICANDO PODS DESPLEGADOS ==="
kubectl get pods -l app=demo-microservice-istio

echo ""
echo "=== VERIFICANDO DEPLOYMENTS ==="
kubectl get deployments -l app=demo-microservice-istio

# Configurar ArgoCD para permitir repositorios locales
echo "Configurando ArgoCD para repositorios locales..."
kubectl patch configmap argocd-cmd-params-cm -n argocd --type merge -p='{"data":{"reposerver.enable.git.submodule":"true","reposerver.git.request.timeout":"60"}}'

# Reiniciar repo-server para aplicar cambios
kubectl rollout restart deployment/argocd-repo-server -n argocd
sleep 10

# Eliminar aplicaciones problem√°ticas existentes
kubectl delete applications -n argocd --all --ignore-not-found=true

# Crear Application simple que funcione
cat > argocd-manifests/demo-microservice-app.yaml << EOF
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: demo-microservice-istio
  namespace: argocd
  labels:
    app: demo-microservice
spec:
  project: demo-project
  source:
    repoURL: 'https://github.com/Adan2804/demo-microservice.git'
    path: istio
    targetRevision: HEAD
  destination:
    server: 'https://kubernetes.default.svc'
    namespace: default
  syncPolicy:
    syncOptions:
    - CreateNamespace=true
EOF

# Crear proyecto personalizado para permitir repositorios locales
cat > argocd-manifests/demo-project.yaml << EOF
apiVersion: argoproj.io/v1alpha1
kind: AppProject
metadata:
  name: demo-project
  namespace: argocd
spec:
  description: 'Proyecto para repositorios locales'
  sourceRepos:
  - 'file://*'
  - '*'
  destinations:
  - namespace: '*'
    server: 'https://kubernetes.default.svc'
  clusterResourceWhitelist:
  - group: '*'
    kind: '*'
  namespaceResourceWhitelist:
  - group: '*'
    kind: '*'
EOF

echo "‚úÖ Configuraciones creadas en argocd-manifests/"

# 6. APLICAR CONFIGURACIONES A ARGOCD
echo ""
echo "üöÄ APLICANDO CONFIGURACIONES A ARGOCD..."

# Esperar que ArgoCD est√© completamente listo
echo "Esperando que ArgoCD est√© completamente operativo..."
sleep 15

# Aplicar configuraciones
kubectl apply -f argocd-manifests/

# Verificar el estado de la aplicaci√≥n con logs detallados
echo "Verificando estado de la aplicaci√≥n en ArgoCD..."
sleep 10

# Obtener logs detallados de ArgoCD
echo "=== LOGS DE ARGOCD REPO-SERVER ==="
kubectl logs -n argocd deployment/argocd-repo-server --tail=20

echo ""
echo "=== ESTADO DE LA APLICACI√ìN ==="
kubectl get application demo-microservice-istio -n argocd -o yaml

echo ""
echo "=== VERIFICANDO ARCHIVOS EN EL REPOSITORIO ==="
ls -la istio/

# Forzar sincronizaci√≥n inmediata
echo "Forzando sincronizaci√≥n de la aplicaci√≥n..."
kubectl patch application demo-microservice-istio -n argocd --type='merge' -p='{"operation":{"sync":{"revision":"HEAD"}}}'

echo "‚úÖ Aplicaciones configuradas en ArgoCD"

# 7. CREAR SCRIPT DE GESTI√ìN
echo ""
echo "üìù CREANDO SCRIPTS DE GESTI√ìN..."

# Script para iniciar ArgoCD
cat > ./scripts/start-argocd.sh << 'EOF'
#!/bin/bash
echo "üöÄ Iniciando ArgoCD Dashboard..."

# Limpiar port-forwards existentes
pkill -f "kubectl port-forward.*argocd" 2>/dev/null || true
sleep 2

# Iniciar port-forward
kubectl port-forward svc/argocd-server -n argocd 8081:443 > /dev/null 2>&1 &
ARGOCD_PF_PID=$!

echo "‚úÖ ArgoCD Dashboard disponible en: https://localhost:8081"
echo "Port-forward activo (PID: $ARGOCD_PF_PID)"

# Mostrar credenciales
echo ""
echo "üîë CREDENCIALES:"
echo "Usuario: admin"
echo "Password: $(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)"
EOF

chmod +x ./scripts/start-argocd.sh

# Script para detener ArgoCD
cat > ./scripts/stop-argocd.sh << 'EOF'
#!/bin/bash
echo "üõë Deteniendo ArgoCD Dashboard..."

# Detener port-forwards
pkill -f "kubectl port-forward.*argocd" 2>/dev/null || true

echo "‚úÖ ArgoCD Dashboard detenido"
EOF

chmod +x ./scripts/stop-argocd.sh

# 8. VERIFICAR ESTADO
echo ""
echo "üîç VERIFICANDO ESTADO DE ARGOCD..."

echo "Pods de ArgoCD:"
kubectl get pods -n argocd

echo ""
echo "Aplicaciones en ArgoCD:"
kubectl get applications -n argocd

# 9. RESUMEN FINAL
echo ""
echo "üéâ ARGOCD CONFIGURADO EXITOSAMENTE"
echo "=================================="
echo ""
echo "‚úÖ ArgoCD instalado y funcionando"
echo "‚úÖ Aplicaciones configuradas"
echo "‚úÖ Port-forward activo"
echo ""
echo "üåê ACCESO A ARGOCD:"
echo "‚Ä¢ URL: https://localhost:8081"
echo "‚Ä¢ Usuario: admin"
echo "‚Ä¢ Password: $ARGOCD_PASSWORD"
echo ""
echo "üì± APLICACIONES CONFIGURADAS:"
echo "‚Ä¢ demo-microservice-production (Auto-sync habilitado)"
echo "‚Ä¢ demo-microservice-experiment (Sync manual)"
echo ""
echo "üõ†Ô∏è  GESTI√ìN:"
echo "‚Ä¢ Iniciar ArgoCD: ./scripts/start-argocd.sh"
echo "‚Ä¢ Detener ArgoCD: ./scripts/stop-argocd.sh"
echo ""
echo "üìÅ ARCHIVOS CREADOS:"
echo "‚Ä¢ argocd-manifests/ - Configuraciones de ArgoCD"
echo "‚Ä¢ scripts/start-argocd.sh - Iniciar dashboard"
echo "‚Ä¢ scripts/stop-argocd.sh - Detener dashboard"
echo ""
echo "üöÄ PR√ìXIMOS PASOS:"
echo "1. Abrir https://localhost:8081 en tu navegador"
echo "2. Iniciar sesi√≥n con las credenciales mostradas"
echo "3. Gestionar deployments desde la interfaz web"
echo "4. Crear experimentos desde ArgoCD"
echo ""
echo "üí° NOTA:"
echo "ArgoCD ahora gestiona tus deployments autom√°ticamente."
echo "Los cambios en los archivos YAML se sincronizar√°n autom√°ticamente."
echo ""
echo "Port-forward activo (PID: $ARGOCD_PF_PID)"