#!/bin/bash

# Script para configurar ArgoCD con SYNC MANUAL
# Para pruebas controladas sin auto-sync

APP_NAME="demo-microservice-versioned-app"
NAMESPACE="demo-app"
REPO_URL="https://github.com/Adan2804/demo-microservice.git"
REPO_PATH="k8s-versioned-manifests-processed"
TARGET_REVISION="HEAD"
ARGOCD_NAMESPACE="argocd"

echo "üöÄ CONFIGURACI√ìN DE ARGOCD - SYNC MANUAL"
echo "========================================="
echo ""

echo "üìã Configuraci√≥n:"
echo "  ‚Ä¢ Nombre de aplicaci√≥n: $APP_NAME"
echo "  ‚Ä¢ Namespace destino: $NAMESPACE"
echo "  ‚Ä¢ Repositorio: $REPO_URL"
echo "  ‚Ä¢ Path en repo: $REPO_PATH"
echo "  ‚Ä¢ Sync Mode: MANUAL (sin auto-sync)"
echo ""

# Verificar conexi√≥n a Kubernetes y ArgoCD
echo "üîç Verificando conexi√≥n a Kubernetes..."
if ! kubectl cluster-info >/dev/null 2>&1; then
    echo "‚ùå Error: No hay conexi√≥n al cluster"
    exit 1
fi

echo "üîç Verificando ArgoCD..."
if ! kubectl get deployment argocd-server -n $ARGOCD_NAMESPACE >/dev/null 2>&1; then
    echo "‚ùå Error: ArgoCD no est√° instalado en el namespace $ARGOCD_NAMESPACE"
    exit 1
fi

echo "‚úÖ Verificaciones OK"

# Crear namespace destino si no existe
echo "üìÅ Creando namespace destino..."
kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f - >/dev/null
echo "‚úÖ Namespace $NAMESPACE listo"

# Eliminar aplicaci√≥n anterior si existe
echo "üßπ Limpiando aplicaci√≥n anterior..."
kubectl delete application $APP_NAME -n $ARGOCD_NAMESPACE --ignore-not-found=true
kubectl delete application demo-microservice-app -n $ARGOCD_NAMESPACE --ignore-not-found=true
sleep 5

# Crear manifiesto de aplicaci√≥n ArgoCD con SYNC MANUAL
echo "üìù Creando aplicaci√≥n ArgoCD con sync manual..."

cat > /tmp/argocd-app-manual.yaml << EOF
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: $APP_NAME
  namespace: $ARGOCD_NAMESPACE
  labels:
    app: demo-microservice-versioned
    managed-by: argocd
    sync-mode: manual
  annotations:
    argocd.argoproj.io/sync-wave: "0"
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: default
  source:
    repoURL: '$REPO_URL'
    path: $REPO_PATH
    targetRevision: $TARGET_REVISION
  destination:
    server: 'https://kubernetes.default.svc'
    namespace: $NAMESPACE
  syncPolicy:
    # SYNC MANUAL - Comentado para evitar auto-sync
    # automated:
    #   prune: true
    #   selfHeal: true
    #   allowEmpty: false
    syncOptions:
    - CreateNamespace=true
    - PrunePropagationPolicy=foreground
    - PruneLast=true
    - RespectIgnoreDifferences=true
    - ApplyOutOfSyncOnly=true
    retry:
      limit: 3
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 1m
  revisionHistoryLimit: 10
  ignoreDifferences:
  - group: apps
    kind: Deployment
    jsonPointers:
    - /metadata/annotations/deployment.kubernetes.io~1revision
    - /spec/replicas
  - group: ""
    kind: Service
    jsonPointers:
    - /spec/clusterIP
    - /spec/clusterIPs
    - /metadata/annotations/kubectl.kubernetes.io~1last-applied-configuration
EOF

# Aplicar manifiesto
kubectl apply -f /tmp/argocd-app-manual.yaml
if [ $? -eq 0 ]; then
    echo "‚úÖ Aplicaci√≥n creada en ArgoCD (SYNC MANUAL)"
    rm -f /tmp/argocd-app-manual.yaml
else
    echo "‚ùå Error aplicando manifiesto de aplicaci√≥n"
    rm -f /tmp/argocd-app-manual.yaml
    exit 1
fi

# Verificar estado de la aplicaci√≥n
echo ""
echo "üîç Verificando estado de la aplicaci√≥n..."
sleep 5

APP_STATUS=$(kubectl get application $APP_NAME -n $ARGOCD_NAMESPACE -o jsonpath='{.status.sync.status}' 2>/dev/null || echo "Unknown")
HEALTH_STATUS=$(kubectl get application $APP_NAME -n $ARGOCD_NAMESPACE -o jsonpath='{.status.health.status}' 2>/dev/null || echo "Unknown")

echo "üìä Estado de la aplicaci√≥n:"
echo "  ‚Ä¢ Sync Status: $APP_STATUS"
echo "  ‚Ä¢ Health Status: $HEALTH_STATUS"

if [ "$APP_STATUS" = "OutOfSync" ] || [ "$APP_STATUS" = "Unknown" ]; then
    echo "  ‚úÖ Estado correcto para sync manual"
    echo "  La aplicaci√≥n esperar√° sync manual"
else
    echo "  ‚ÑπÔ∏è  Estado: $APP_STATUS"
fi

# Configurar acceso a ArgoCD UI
echo ""
echo "üåê Configurando acceso a ArgoCD UI..."

# Verificar si ya hay port-forward activo
if pgrep -f "kubectl.*port-forward.*argocd-server" >/dev/null; then
    echo "‚úÖ Port-forward ya est√° activo"
else
    echo "üîå Iniciando port-forward para ArgoCD..."
    kubectl port-forward svc/argocd-server -n $ARGOCD_NAMESPACE 8081:443 >/dev/null 2>&1 &
    sleep 3
    echo "‚úÖ Port-forward iniciado en puerto 8081"
fi

# Obtener credenciales de ArgoCD
echo ""
echo "üîë Obteniendo credenciales de ArgoCD..."

ARGOCD_PASSWORD=$(kubectl get secret argocd-initial-admin-secret -n $ARGOCD_NAMESPACE -o jsonpath='{.data.password}' 2>/dev/null | base64 -d 2>/dev/null || echo "Ver documentaci√≥n de ArgoCD")

if [ "$ARGOCD_PASSWORD" != "Ver documentaci√≥n de ArgoCD" ]; then
    echo "‚úÖ Credenciales obtenidas"
else
    echo "‚ö†Ô∏è  No se pudieron obtener las credenciales autom√°ticamente"
fi

# Crear scripts de gesti√≥n manual
echo ""
echo "üìù Creando scripts de gesti√≥n manual..."

# Script para sync manual
cat > ./scripts/manual-sync.sh << 'EOF'
#!/bin/bash
echo "üîÑ SYNC MANUAL DE ARGOCD"
echo "========================"

APP_NAME="demo-microservice-versioned-app"
ARGOCD_NAMESPACE="argocd"

echo "üìä Estado actual:"
kubectl get application $APP_NAME -n $ARGOCD_NAMESPACE

echo ""
echo "üöÄ Ejecutando sync manual..."
kubectl patch application $APP_NAME -n $ARGOCD_NAMESPACE --type merge -p '{"operation":{"sync":{"revision":"HEAD"}}}'

echo ""
echo "‚è≥ Esperando sincronizaci√≥n..."
sleep 10

echo ""
echo "üìä Estado despu√©s del sync:"
kubectl get application $APP_NAME -n $ARGOCD_NAMESPACE

echo ""
echo "‚úÖ Sync manual completado"
EOF

chmod +x ./scripts/manual-sync.sh

# Script para ver estado
cat > ./scripts/check-status.sh << 'EOF'
#!/bin/bash
echo "üìä ESTADO DE ARGOCD"
echo "==================="

APP_NAME="demo-microservice-versioned-app"
ARGOCD_NAMESPACE="argocd"
NAMESPACE="demo-app"

echo ""
echo "üîç Aplicaci√≥n:"
kubectl get application $APP_NAME -n $ARGOCD_NAMESPACE -o wide

echo ""
echo "üì¶ Recursos en el cluster:"
kubectl get all -n $NAMESPACE -l app=demo-microservice 2>/dev/null || echo "No hay recursos desplegados a√∫n"

echo ""
echo "üåê Services versionados:"
kubectl get svc -n $NAMESPACE -l app=demo-microservice 2>/dev/null || echo "No hay services versionados a√∫n"

echo ""
echo "üí° Para hacer sync manual:"
echo "./scripts/manual-sync.sh"
EOF

chmod +x ./scripts/check-status.sh

echo "‚úÖ Scripts de gesti√≥n creados"

# Resumen final
echo ""
echo "üéâ CONFIGURACI√ìN MANUAL COMPLETADA"
echo "=================================="
echo ""

echo "‚úÖ Aplicaci√≥n '$APP_NAME' creada en ArgoCD"
echo "‚úÖ Sync configurado como MANUAL"
echo "‚úÖ Scripts de gesti√≥n creados"

echo ""
echo "üåê Acceso a ArgoCD UI:"
echo "  ‚Ä¢ URL: https://localhost:8081"
echo "  ‚Ä¢ Usuario: admin"
echo "  ‚Ä¢ Password: $ARGOCD_PASSWORD"
echo "  ‚Ä¢ Aplicaci√≥n: $APP_NAME"

echo ""
echo "üîß FLUJO DE TRABAJO MANUAL:"
echo "  1. Generar manifiestos:"
echo "     ./scripts/deploy-versioned-release-manual.sh v-1-0-0"
echo "  2. Ver estado (debe mostrar OutOfSync):"
echo "     ./scripts/check-status.sh"
echo "  3. Hacer sync manual:"
echo "     ./scripts/manual-sync.sh"
echo "  4. Verificar deployment:"
echo "     ./scripts/test-version-routing.sh v-1-0-0"

echo ""
echo "üìÅ ARCHIVOS CREADOS:"
echo "  ‚Ä¢ scripts/manual-sync.sh - Sync manual"
echo "  ‚Ä¢ scripts/check-status.sh - Ver estado"

echo ""
echo "üí° VENTAJAS DEL SYNC MANUAL:"
echo "  ‚Ä¢ Control total sobre cu√°ndo se aplican cambios"
echo "  ‚Ä¢ Puedes revisar diffs antes de aplicar"
echo "  ‚Ä¢ Ideal para pruebas y demos"
echo "  ‚Ä¢ Evita cambios inesperados durante presentaciones"