#!/bin/bash

# Script para promover el experimento exitoso a Blue-Green Rollout
set -e

echo "üîÑ PROMOVIENDO EXPERIMENTO A BLUE-GREEN ROLLOUT"
echo "==============================================="

cd "$(dirname "$0")/.."

if ! kubectl get experiment demo-microservice-ab-experiment >/dev/null 2>&1; then
    echo "‚ùå No hay experimento activo"
    echo "Ejecuta primero: ./scripts/04-start-ab-experiment.sh"
    exit 1
fi

EXPERIMENT_STATUS=$(kubectl get experiment demo-microservice-ab-experiment -o jsonpath='{.status.phase}')
echo "üìä Estado del experimento: $EXPERIMENT_STATUS"

if [ "$EXPERIMENT_STATUS" != "Successful" ] && [ "$EXPERIMENT_STATUS" != "Running" ]; then
    echo "‚ö†Ô∏è  El experimento no est√° en estado exitoso o corriendo"
    echo "Estado actual: $EXPERIMENT_STATUS"
    read -p "¬øDeseas continuar de todos modos? (y/n): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

eval $(minikube docker-env)

echo ""
echo "üöÄ DESPLEGANDO BLUE-GREEN ROLLOUT..."
kubectl apply -f experiments/05-rollout-ab-testing.yaml

echo ""
echo "‚è≥ ESPERANDO QUE EL ROLLOUT EST√â LISTO..."
sleep 10

echo ""
echo "üìä ESTADO DEL ROLLOUT:"
kubectl argo rollouts status demo-microservice-rollout --watch=false || \
    kubectl get rollout demo-microservice-rollout

echo ""
echo "üîÑ ACTUALIZANDO A VERSI√ìN EXPERIMENTAL..."
kubectl argo rollouts set image demo-microservice-rollout \
  demo-microservice=demo-microservice:experiment || \
    kubectl patch rollout demo-microservice-rollout --type='json' \
      -p='[{"op": "replace", "path": "/spec/template/spec/containers/0/image", "value":"demo-microservice:experiment"}]'

echo ""
echo "‚è≥ ESPERANDO AN√ÅLISIS PRE-PROMOCI√ìN..."
sleep 15

echo ""
echo "üìä ESTADO ACTUAL:"
kubectl argo rollouts get rollout demo-microservice-rollout || \
    kubectl get rollout demo-microservice-rollout -o wide

echo ""
echo "üéâ BLUE-GREEN ROLLOUT INICIADO"
echo "=============================="
echo ""
echo "üìã INFORMACI√ìN:"
echo "‚Ä¢ Rollout: demo-microservice-rollout"
echo "‚Ä¢ Estrategia: Blue-Green"
echo "‚Ä¢ Active Service: demo-microservice-istio-active"
echo "‚Ä¢ Preview Service: demo-microservice-istio-preview"
echo ""
echo "üîç VERIFICACI√ìN:"
echo "‚Ä¢ Ver servicios:"
echo "  kubectl get svc | grep demo-microservice-istio"
echo ""
echo "‚Ä¢ Ver pods:"
echo "  kubectl get pods -l app=demo-microservice-istio"
echo ""
echo "‚Ä¢ Probar versi√≥n PREVIEW (nueva):"
echo "  kubectl port-forward svc/demo-microservice-istio-preview 8081:80"
echo "  curl http://localhost:8081/demo/info"
echo ""
echo "‚Ä¢ Probar versi√≥n ACTIVE (actual):"
echo "  kubectl port-forward svc/demo-microservice-istio-active 8082:80"
echo "  curl http://localhost:8082/demo/info"
echo ""
echo "üéõÔ∏è  GESTI√ìN DEL ROLLOUT:"
echo "‚Ä¢ Ver estado detallado:"
echo "  kubectl argo rollouts get rollout demo-microservice-rollout"
echo ""
echo "‚Ä¢ Ver dashboard:"
echo "  kubectl argo rollouts dashboard"
echo ""
echo "‚Ä¢ PROMOVER (cambiar tr√°fico a nueva versi√≥n):"
echo "  kubectl argo rollouts promote demo-microservice-rollout"
echo ""
echo "‚Ä¢ ABORTAR (volver a versi√≥n anterior):"
echo "  kubectl argo rollouts abort demo-microservice-rollout"
echo ""
echo "‚Ä¢ Ver an√°lisis:"
echo "  kubectl get analysisrun"
echo ""
echo "üí° FLUJO BLUE-GREEN:"
echo "1. ‚úÖ Nueva versi√≥n desplegada en PREVIEW"
echo "2. ‚è≥ An√°lisis pre-promoci√≥n en curso"
echo "3. ‚è∏Ô∏è  Esperando aprobaci√≥n manual"
echo "4. üöÄ Ejecuta 'promote' para cambiar tr√°fico a nueva versi√≥n"
echo "5. ‚úÖ An√°lisis post-promoci√≥n"
echo "6. üóëÔ∏è  Versi√≥n anterior se elimina despu√©s de 30s"
echo ""
echo "‚ö†Ô∏è  IMPORTANTE:"
echo "El rollout est√° en pausa esperando tu aprobaci√≥n."
echo "Revisa la versi√≥n preview y ejecuta promote cuando est√©s listo."
echo ""
echo "üßπ LIMPIEZA DEL EXPERIMENT:"
echo "Una vez que el rollout est√© estable, puedes eliminar el experiment:"
echo "  kubectl delete experiment demo-microservice-ab-experiment"
